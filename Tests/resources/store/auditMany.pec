define print as native method receiving Text value doing:
	Java: System.out.print(value);
	C#: System.Console.Write(value);
	Python2: print(objects=value,end="")
	Python3: print(objects=value,end="")
	JavaScript: process.stdout.write(value);

// runtime reference of any object
define id as Integer attribute
// database reference of stored object
define dbId as storable Any attribute
// any object has a text attribute, used for display 
define text as storable Text attribute with value and words index

define Any as native category with attributes id and text, and bindings:

	define category bindings as:
		Java: prompto.intrinsic.PromptoAny
		C#: prompto.value.AnyValue
		Python2: AnyValue from module: prompto.value.AnyValue
		Python3: AnyValue from module: prompto.value.AnyValue
		JavaScript: AnyValue from module: prompto/intrinsic/AnyValue.js

and methods: 

	define id as getter doing:
		Java: return System.identityHashCode(this);
		C#: return System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this);
		Python2: return id(self)
		Python3: return id(self)
		JavaScript: return this.id;
	
	define text as getter doing:
		Java: return this.toString();
		C#: return this.ToString();
		Python2: return str(self)
		Python3: return str(self)
		JavaScript: return this.toString();


define fetchAllAuditMetadataIds as native method receiving Any dbId returning Any[] doing:
	Java: return $store.fetchAllAuditMetadataIds(dbId);
	C#: return $store.FetchAllAuditMetadataIds(dbId);
	Python2: return $store.fetchAllAuditMetadataIds(dbId)
	Python3: return $store.fetchAllAuditMetadataIds(dbId)
	JavaScript: return $store.fetchAllAuditMetadataIds(dbId);

define fetchDbIdsAffectedByAuditMetadataId as native method receiving Any dbId returning Any[] doing:
	Java: return $store.fetchDbIdsAffectedByAuditMetadataId(dbId);
	C#: return $store.fetchDbIdsAffectedByAuditMetadataId(dbId);
	Python2: return $store.fetchDbIdsAffectedByAuditMetadataId(dbId)
	Python3: return $store.fetchDbIdsAffectedByAuditMetadataId(dbId)
	JavaScript: return $store.fetchDbIdsAffectedByAuditMetadataId(dbId);

define name as storable Text attribute with index

define Entity as storable category with attribute name

define main as method receiving Text<:> options doing:
	e1 = Entity with "John" as name
	e2 = Entity with "Jennifer" as name
	store e1, e2 with { "login": "albert" } as metadata
	metaIds = fetchAllAuditMetadataIds with e2.dbId as dbId
	dbIds = fetchDbIdsAffectedByAuditMetadataId with metaIds[1] as dbId
	print "/e1:" + (e1.dbId in dbIds)
	print "/e2:" + (e2.dbId in dbIds)
