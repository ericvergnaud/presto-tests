define print as native method receiving Text value doing:
	Java: System.out.print(value);
	C#: System.Console.Write(value);
	Python2: print(objects=value,end="")
	Python3: print(objects=value,end="")
	JavaScript: process.stdout.write(value);

define dbId as DbId attribute 


define fetchAllAuditMetadataIds as native method receiving dbId returning DbId[] doing:
	Java: return $store.fetchAllAuditMetadataIds(dbId);
	C#: return $store.FetchAllAuditMetadataIds(dbId);
	Python2: return $store.fetchAllAuditMetadataIds(dbId)
	Python3: return $store.fetchAllAuditMetadataIds(dbId)
	JavaScript: return $store.fetchAllAuditMetadataIds(dbId);

define fetchDbIdsAffectedByAuditMetadataId as native method receiving dbId returning DbId[] doing:
	Java: return $store.fetchDbIdsAffectedByAuditMetadataId(dbId);
	C#: return $store.fetchDbIdsAffectedByAuditMetadataId(dbId);
	Python2: return $store.fetchDbIdsAffectedByAuditMetadataId(dbId)
	Python3: return $store.fetchDbIdsAffectedByAuditMetadataId(dbId)
	JavaScript: return $store.fetchDbIdsAffectedByAuditMetadataId(dbId);

define name as storable Text attribute with index

define Entity as storable category with attribute name

define main as method receiving Text<:> options doing:
	e1 = Entity with "John" as name
	e2 = Entity with "Jennifer" as name
	store e1, e2 with { "login": "albert" } as metadata
	metaIds = fetchAllAuditMetadataIds with e2.dbId as dbId
	dbIds = fetchDbIdsAffectedByAuditMetadataId with metaIds[1] as dbId
	print "/e1:" + (e1.dbId in dbIds)
	print "/e2:" + (e2.dbId in dbIds)
